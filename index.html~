 <!DOCTYPE html>
<html>
<head>
<title>Jonathan Dolan</title>
<link rel="stylesheet" href="basic.css" type="text/css" media="screen" charset="utf-8">
</head>
<body>

<p>This site is a portfolio of my time at Westminster College, where I earned a Bachelor's of Science degree in Computer Information Systems.
</p>

<h1>Portfolio</h1>

<h2><a href="/code/FindPathV1">Path searches<a></h2>
	<p>This project was part of my introduction to Artifical Intelligence class. The assignment was to make a program that solves mazes with search algorithms, specifically depth first, breadth first, uniform cost, and A* search algorithms. This was my first expereince with the Python programming language, besides a short tutorial. I was very impressed with Python's duck typing system, although it took a lot of getting used to after having only worked with statically typed languages like Java or C/C++.</p>
	<p>I am always amazed and fascinated with the elegence of beauty of certain algorithms, and that was definitely the case with this assignment. I was especially amazed with the A* algorithm, and how such a small amount of code can solve a problem so efficiently, and that the problem can be any size and it still works without any changes to the algorithm.</p>

<h2><a href="https://github.com/jonathandolan/flavorPairing">Flavor pairing</a></h2>
	<p>This assignment was my final project for my class on databases. I worked with Chris Fowles on this project, who did most of the UI work, while I wrote the backend code. The goal of this project was to create a database that holds pairs of ingredients that go well together, and a user interface to communicate with the database. We implemented it with Django, which is an MVC framework for Python.</p>
	<p>In this project, I got to know Python better, and learned about the Django framework. I have had other classes that introduced web development technologies such as HTML, CSS, PHP, and Javascript, but this was my first real introduction of how to make modern, dynamic web pages. I was especially impressed with Django's models, and how you can use very high level commands to create objects, which are then put in the database for you. Django's models also make reading from the database easy, as you can think of the database elements as objects, so you don't have to write an SQL wrapper.</p>

<h2><a href="/code/tictac">Tic-Tac-Tomek</a></h2>
	<p>This was a program that I wrote in my free time in order to prepare for the Google Code Jam. The Code Jam is an individual programming competition that Google puts together. They also put all of the problems from previous years on their site, and this program was in response to the Tic-Tac-Tomek problem from 2013. The problem is fairly simple and involves checking a Tic-Tac-Toe board to see what side has won, if it is a draw, or if the game is still going on. The twist is that the Tic-Tac-Toe board is 4 x 4, instead of the normal 3 x 3 board, and there is a "T" marker on the board at the start, which counts as a piece for both sides.</p>
	<p>This project was one of my first programs in the Go programming language, and was also the first time I had done parallel processing from scratch. Go is built for concurrency, and if you put the word go in front of any method call, it spins that method off into a goroutine, which is a lightweight thread. Go also has datatypes called channels which are used for communication between goroutines. Since there are several conditions that will cause a win, I was able to check for a vertical, horizontal, or diagonal win for each side at the same time.</p>

<h2><a href="https://github.com/jonathandolan/mathbaseball">MathBaseball</a></h2>
	<p>MathBaseball was the semester long project for my Software Engineering class. I worked with Chris Fowles, who did the GUI, and Dan Barton, who managed the database, while I wrote the backend code. The goals of the project were to make an application that could teach elementary school students addition, subraction, and number recognition. We chose to make it into a baseball game, where the difficulty of the question would result in more bases scored, and eventually more points. We wrote this program with Java as the main language, Swing for the GUI, and SQL as the database.</p>
	<p>This was the first large project I had been apart of, and my first time using the Agile/Scrum methedologies, and also the first time that I had used Git. This was a first for me in so many ways, and it shows in the project. There are oddities in the directory structure and the code itself. I chose to leave the repository as it is in order to show how far I have progressed and to have something to look back on in the future. This was by far the most stressful and most difficult class I have ever taken, but it was also the most rewarding, and I learned the most from it. I learned how a proffessional development team works, and how it shouldn't. I also learned of the difficulties with working with multiple people who are doing multiple tasks that have to be integrated and bound tightly together.</p>

<h2><a href="https://github.com/jonathandolan/kacce">KACCE</a></h2>
	<p>KACCE (KACCE Anti Computer Chess Engine) was built for my senior capstone at Westminster College. The senior capstone is a large individual software project that showcases all that we have learned in our time at Westminster. The goal of my project was to create a chess engine that was built to beat other chess engines, not humans, by leveraging the horizon effect.</p>
	<p>I encountered many difficulties with this project, and so it still gets beaten in almost every game it plays. KACCE plays chess, and plays chess correctly, but it does not play chess well. I plan on eventually coming back and continue working on it so that it fulfills the original goals of the project. For a more thourough reflection, see the <a href="https://github.com/jonathandolan/kacce/blob/master/docs/kacceReport.pdf">final project report.</a></p>

</body>
</html> 
